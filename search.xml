<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python sorted compare]]></title>
    <url>%2F2018%2F07%2F31%2Fpython-sorted-and-obj-sorted-compare%2F</url>
    <content type="text"><![CDATA[MySortDataNow that I have some data and need to sort it, I need to find a faster sorting method in the sorting method.Data as shown below:1data = &#123;1:&#123;'total_score':50, 'compare_score':49, 'name':'roc'&#125;,.....&#125; The above is a set of data, and I need to sort them according to the score fieldin the dictionary Compare sorted() obj.sort()I try sorted() Methon:1result = sorted(data.items(), key=lambda x:x[1]['total_score'], reverse=True) OK! I get the result! it’s average run time is : 7.5841E-06And I try obj.sort() Methon:1result.sort(key=lambda x:x['compare_score'], reverse=True) it’s average run time is : 6.5666E-06This result doesn’t seem to make any difference Use itemgetterBecause of my depth of listing, I can’t use itemgetter directly. So first define it123get_position = itemgetter(1) # get index 1get_compare = itemgetter('compare_score') # get compare_score dataget_total = itemgetter('total_score') # get total_score data Now use sorted():1result = sorted(data.items(), key=lambda x: get_total(get_position(x)), reverse=True) Average run time: 1.18327E-05?????????????????? See sort():1result.sort(key=lambda x: get_compare(get_position(x)), reverse=True) Average run time: 1.01018E-05 SummaryFrom the above results, we can see that there is not much difference between using sorted () and using obj. sort (), and obj. sort () may be a little bit faster. But the speed difference with itemgetter is very large.]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python quick</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F30%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to [Hexo] This is your very first post. Check [documentation] for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting] or you can ask me on [GitHub] Quick StartCreate a new post1$ hexo new "My New Post" More info: [Writing] Run server1$ hexo server More info: [Server] Generate static files1$ hexo generate More info: [Generating] Deploy to remote sites1$ hexo deploy More info: [Deployment]]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
